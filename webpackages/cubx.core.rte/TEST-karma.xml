<?xml version="1.0"?>
<testsuites>
  <testsuite name="Chrome 56.0.2924 (Windows 10 0.0.0)" package="" timestamp="2017-03-22T15:19:49" id="0" hostname="Edwin" tests="225" errors="0" failures="0" time="4.642">
    <properties>
      <property name="browser.fullName" value="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"/>
    </properties>
    <testcase name="should insert item at given index in given array if item is of type string" time="0.042" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Utils Array #insertItemAtIndex()"/>
    <testcase name="should insert item at given index in given array if item is of type boolean" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Utils Array #insertItemAtIndex()"/>
    <testcase name="should insert item at given index in given array if item is of type number" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Utils Array #insertItemAtIndex()"/>
    <testcase name="should insert item at given index in given array if item is of type object" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Utils Array #insertItemAtIndex()"/>
    <testcase name="should insert insertItem before given item in given array" time="0.004" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Utils Array #insertBefore()"/>
    <testcase name="should insert insertItem at the end of given array if given item is not in array" time="0.004" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Utils Array #insertBefore()"/>
    <testcase name="should return index of inserted item" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Utils Array #insertBefore()"/>
    <testcase name="should remove given item from array" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Utils Array #removeItemFromArray()"/>
    <testcase name="should throw an error if given item is not in array" time="0.004" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Utils Array #removeItemFromArray()"/>
    <testcase name="should stringify a given object and store it to localStorage using given key" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).StorageManager #setObjectToLocalStorage()"/>
    <testcase name="should get a value from localStorage as Object by given key" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).StorageManager #getObjectFromLocalStorage()"/>
    <testcase name="should return null if no item is found in localStorage for the given key" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).StorageManager #getObjectFromLocalStorage()"/>
    <testcase name="should return a new model for given id if no model is available for the given id" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).StorageManager #getModel()"/>
    <testcase name="should add item to cache using given key" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ResponseCache #addItem(key, item)"/>
    <testcase name="should throw an error if key is not of type string or is empty string" time="0.013" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ResponseCache #addItem(key, item)"/>
    <testcase name="should throw an error if item is null" time="0.004" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ResponseCache #addItem(key, item)"/>
    <testcase name="should override item if there is already one for given key" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ResponseCache #addItem(key, item)"/>
    <testcase name="should return the item for given key" time="0.004" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ResponseCache #get(key)"/>
    <testcase name="should return null if no item was found for given key" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ResponseCache #get(key)"/>
    <testcase name="should throw an error if key is not of type string or is empty string" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ResponseCache #get(key)"/>
    <testcase name="should remove item with given key from cache and return removed item" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ResponseCache #removeItem(key)"/>
    <testcase name="should return null if no item was found for given key" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ResponseCache #removeItem(key)"/>
    <testcase name="should throw an error if key is not of type string or is empty string" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ResponseCache #removeItem(key)"/>
    <testcase name="should empty the cache" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ResponseCache #invalidate()"/>
    <testcase name="should return the inserted DependencyTree.Node instance" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #insertNode()"/>
    <testcase name="should append given node to rootNodes array if neither parent nor before parameter is given." time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #insertNode()"/>
    <testcase name="should insert given node to parents children array if parent and before parameter are given." time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #insertNode()"/>
    <testcase name="should insert given node to rootNodes array as left neighbour of given before node if no parent is given." time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #insertNode()"/>
    <testcase name="should remove given node and all of it&apos;s descendants from tree" time="0.004" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #removeNode()"/>
    <testcase name="should return null if node to be removed could not be found in tree" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #removeNode()"/>
    <testcase name="should return the removed node" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #removeNode()"/>
    <testcase name="should remove given node from usesExisting array of all nodes inside given nodes usedBy array" time="0.004" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #removeNode()"/>
    <testcase name="should log an error if given parameter is not a DependencyTree.Node instance" time="0.006" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #removeNode()"/>
    <testcase name="should traverse the tree in depth first pre-order and call the given callback with each visited node" time="0.015" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #traverseDF()"/>
    <testcase name="should break traversal if callback returns false" time="0.008" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #traverseDF()"/>
    <testcase name="should log an error if parameter is not of type function" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #traverseDF()"/>
    <testcase name="should traverse the tree in breadth first order and call the given callback with each visited node" time="0.028" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #traverseBF()"/>
    <testcase name="should break traversal if callback returns false" time="0.004" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #traverseBF()"/>
    <testcase name="should log an error if parameter is not of type function" time="0.004" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #traverseBF()"/>
    <testcase name="should traverse subtree starting from given node in breadth first order and call callback for each visited node" time="0.008" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #traverseSubtreeBF()"/>
    <testcase name="should log an error if first parameter is not of type DependencyTree.Node" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #traverseSubtreeBF()"/>
    <testcase name="should log an error if second paramter is not of type function" time="0.002" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #traverseSubtreeBF()"/>
    <testcase name="should return true if given node is member of the DependencyTree" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #contains()"/>
    <testcase name="should return false if given node is not member of the DependencyTree" time="0.003" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree #contains()"/>
    <testcase name="should return true if given node references same artifact (based on artifactId and webpackageId)" time="0.002" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree_Node #equalsArtifcat()"/>
    <testcase name="should return false if given node references a different artifact" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree_Node #equalsArtifcat()"/>
    <testcase name="should return a string containing the path from root down to node using [webpackageId]/[artifactId] as node names" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree_Node #getPathAsString()"/>
    <testcase name="should return true if node is a descendant of given node checking also paths for nodes in usedBy array" time="0.002" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree_Node #isDescendantOf()"/>
    <testcase name="should return true if node is an ancestor of given node checking also paths defined by usesExisting array" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree_Node #isAncestorOf()"/>
    <testcase name="should set excluded value of duplicated node to false if duplicate node has excluded value of false" time="0.003" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #_removeDuplicate()"/>
    <testcase name="should keep excluded value true of duplicated node if duplicate node has excluded value of true as well" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #_removeDuplicate()"/>
    <testcase name="should keep excluded value false of duplicated node if duplicate node has excluded value of false as well" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #_removeDuplicate()"/>
    <testcase name="should keep excluded value false of duplicated node if duplicate node has excluded value of true" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #_removeDuplicate()"/>
    <testcase name="should only mark nodes as excluded if they are excluded in subtree of duplicated node as well as in subtree of duplicate node" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #_removeDuplicate()"/>
    <testcase name="should append referrer of removed duplicate node to referrer of duplicated nodes" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #_removeDuplicate()"/>
    <testcase name="should mark all excluded Nodes" time="0.004" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #applyExcludes()"/>
    <testcase name="should return the DependencyTree itself" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #applyGlobalExclude()"/>
    <testcase name="should set exclude value to true for all appearances of given artifact" time="0.002" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #applyGlobalExclude()"/>
    <testcase name="should log an error when given parameter is not a node from within the current DependencyTree instance" time="0.061" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #getListOfConflictedNodes()"/>
    <testcase name="should return an array containing a list of all conflicts found in DependencyTree (using level order traversal)" time="0.007" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #getListOfConflictedNodes()"/>
    <testcase name="should return an array containing a list of all conflicts found in subtree of given node (using level order traversal)" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #getListOfConflictedNodes()"/>
    <testcase name="should return an empty array if there are no conflicts in subtree of given nodes" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #getListOfConflictedNodes()"/>
    <testcase name="should return the DependencyTree itself" time="0.018" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #removeDuplicates()"/>
    <testcase name="should remove all duplicated nodes from DependencyTree. Only the first one that is found using breadth-first traversal is kept." time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #removeDuplicates()"/>
    <testcase name="should return DependencyTree which contains each webpackage exactly once" time="0.002" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #removeDuplicates()"/>
    <testcase name="should create correct &apos;usedBy&apos; and &apos;usesExisting&apos; relations" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #removeDuplicates()"/>
    <testcase name="should set excluded value on each remaining node correctly" time="0.002" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #removeDuplicates()"/>
    <testcase name="should remove all nodes which have property excludes set to true" time="0.003" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #removeExcludes()"/>
    <testcase name="should return the DependencyTree itself" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyTree Modification #removeExcludes()"/>
    <testcase name="should create new ManifestCache instance with empty caches for each type of manifest" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #new Cache()"/>
    <testcase name="should be contains in the _componentCache as object" time="0.012" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #addComponentCacheEntry"/>
    <testcase name="should get the under test-key stored artifact" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #getComponentCacheEntry"/>
    <testcase name="should get the under test-key2 stored artifact" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #getComponentCacheEntry"/>
    <testcase name="returned object is deep equal with _componentCache attribute" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #getAllComponents"/>
    <testcase name="should set the processedManifest for the key" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #setResolvedComponent()"/>
    <testcase name="should get the processedManifest for the key" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #getResolvedComponent()"/>
    <testcase name="should get null, if by the key no cache entry exists" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #getResolvedComponent()"/>
    <testcase name="should delete by key cached object" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #deleteResolvedComponent()"/>
    <testcase name="should set a entry in _componentCache with the given key" time="0.003" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #_setComponentCacheEntryForKey"/>
    <testcase name="add compoundComponent to empty cache" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #_addComponentCacheEntry add  componentEntry to empty cache"/>
    <testcase name="add elementaryComponent to empty cache" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #_addComponentCacheEntry add  componentEntry to empty cache"/>
    <testcase name="for compoundComponent should exist the cache entry by artifactId" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #_addComponentCacheEntry add componentEntry, if an the component with the same artifactId already in cache"/>
    <testcase name="for elementaryComponent should exist the cache entry by artifactId" time="0.002" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #_addComponentCacheEntry add componentEntry, if an the component with the same artifactId already in cache"/>
    <testcase name="it should be exists with warning " time="0.003" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #_addComponentCacheEntry add componentEntry, if the articleId exist for another webpackage"/>
    <testcase name="should find the component with artifactId &quot;my-elementary&quot;" time="0.002" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #_findComponentInDocument in document with all artefacts"/>
    <testcase name="should find the component with artifactId &quot;my-compound&quot;" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #_findComponentInDocument in document with all artefacts"/>
    <testcase name="should not find the artifact with artifactId &quot;my-util1&quot;" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #_findComponentInDocument in document with all artefacts"/>
    <testcase name="should not find the artifact with artifactId &quot;my-app&quot;" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #_findComponentInDocument in document with all artefacts"/>
    <testcase name="should not find the component with artifactId" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).Cache #_findComponentInDocument without compoundComponent and elementaryComponent artifacts,"/>
    <testcase name="should append crc root DOM node to given DOM node" time="0.002" classname="Chrome 56.0.2924 (Windows 10 0.0.0).CRC #init() with crc root element: cubx-core-crc"/>
    <testcase name="should append crc root DOM node to given DOM node" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).CRC #init() whitout crc root element"/>
    <testcase name="" time="0.003" classname="Chrome 56.0.2924 (Windows 10 0.0.0).CRC #getCRCElement() body is crc root"/>
    <testcase name="should get the current crc root element as Element Object" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).CRC #getCRCElement() crc root marked with &quot;cubx-core-crc&quot; "/>
    <testcase name="should return the DependencyMgr instance of crc" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).CRC #getDependencyMgr()"/>
    <testcase name="model version 5.12.5 cut after minor version " time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).CRC #getNormedModelVersion"/>
    <testcase name="model version 5.12 will left by to 5.12 " time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).CRC #getNormedModelVersion"/>
    <testcase name="model version 5 will be completed to 5.0 " time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).CRC #getNormedModelVersion"/>
    <testcase name="model version 8.0.0 is allowed " time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).CRC #_isModelVersionSupported"/>
    <testcase name="model version 8.0 is allowed " time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).CRC #_isModelVersionSupported"/>
    <testcase name="model version 3.0  is not allowed " time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).CRC #_isModelVersionSupported"/>
    <testcase name="model version 4.1.0 is not allowed " time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).CRC #_isModelVersionSupported"/>
    <testcase name="should create a new PayloadObject object" time="0.003" classname="Chrome 56.0.2924 (Windows 10 0.0.0).EventFactory #createModelChangePayloadObject() create with slot, detail, connectionHook"/>
    <testcase name="should create a new PayloadObject object" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).EventFactory #createModelChangePayloadObject() create with slot, detail"/>
    <testcase name="should be throw an exception just one argument assign" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).EventFactory #createModelChangePayloadObject() error handlingl"/>
    <testcase name="should be throw an exception no argument assign" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).EventFactory #createModelChangePayloadObject() error handlingl"/>
    <testcase name="connectionHook not a function: should cause an exception" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).EventFactory #createModelChangePayloadObject() error handlingl"/>
    <testcase name="should be true, if an event from type EventFactory.types.CIF_READY created" time="0.003" classname="Chrome 56.0.2924 (Windows 10 0.0.0).EventFactory #createEvent create an event from type EventFactory_types_CIF_READY"/>
    <testcase name="should be true, if an event from type EventFactory.types.CIF_READYDOM_UPDATE_READY created" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).EventFactory #createEvent create an event from type EventFactory_types_CIF_DOM_UPDATE_READY"/>
    <testcase name="should be true, if an event from type EventFactory.types.COMPONENT_READY created" time="0.002" classname="Chrome 56.0.2924 (Windows 10 0.0.0).EventFactory #createEvent create an event from type EventFactory_types_COMPONENT_READY"/>
    <testcase name="should be true, if an event from type EventFactory.types.CIF_ALL_COMPONENTS_READY created" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).EventFactory #createEvent create an event from type EventFactory_types_CIF_ALL_COMPONENTS_READY"/>
    <testcase name="should be true, if an event from type EventFactory.types.CIF_MODEL_CHANGE created" time="0.004" classname="Chrome 56.0.2924 (Windows 10 0.0.0).EventFactory #createEvent create an event from type EventFactory_types_CIF_MODEL_CHANGE"/>
    <testcase name="should be true, if an event from type EventFactory.types.CIF_MODEL_CHANGE created whitout detail" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).EventFactory #createEvent create an event from type EventFactory_types_CIF_MODEL_CHANGE"/>
    <testcase name="should be false, if an event from type EventFactory.types.CIF_INIT_START created" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).EventFactory #createEvent create an event from type EventFactory_types_CIF_INIT_START"/>
    <testcase name="should be false, if an event from type EventFactory.types.CIF_START created" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).EventFactory #createEvent create an event from type EventFactory_types_CIF_START"/>
    <testcase name="should be false, if an event from type EventFactory.types.CIF_INIT_READY created" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).EventFactory #createEvent create an event from type EventFactory_types_CIF_INIT_READY"/>
    <testcase name="should be throw a TypeException" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).EventFactory #createEvent type parameter is unknown"/>
    <testcase name="should be equals with an expected document" time="0.015" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ComponentResolver #resolvedComponent build resolvedComponent"/>
    <testcase name="should be equals with resolvedComponent" time="0.014" classname="Chrome 56.0.2924 (Windows 10 0.0.0).CRCComponentResolution #getResolvedComponent build resolvedComponent, if initial not in cache resolvedComponent should be build, if not in "/>
    <testcase name="the method &quot;_resolveComponent&quot; should be called" time="0.003" classname="Chrome 56.0.2924 (Windows 10 0.0.0).CRCComponentResolution #getResolvedComponent build resolvedComponent, if initial not in cache resolvedComponent should be build, if not in "/>
    <testcase name="resolvedComponent should be stored in cache " time="0.013" classname="Chrome 56.0.2924 (Windows 10 0.0.0).CRCComponentResolution #getResolvedComponent build resolvedComponent, if initial not in cache resolvedComponent should be build, if not in "/>
    <testcase name="should be equals with an expected document " time="0.038" classname="Chrome 56.0.2924 (Windows 10 0.0.0).CRCComponentResolution #getResolvedComponent build resolvedComponent, if initial not in cache resolvedComponent should be get from cache"/>
    <testcase name="the method &quot;_resolveComponent&quot; should be not called" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).CRCComponentResolution #getResolvedComponent build resolvedComponent, if initial not in cache resolvedComponent should be get from cache"/>
    <testcase name="the cache &quot;_resolvedComponents&quot; should have not contains the resolvedComponent after invalidate" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).CRCComponentResolution #invalidateResolvedManifest"/>
    <testcase name="should set the dependency list as object if list is given as object" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyManager #init()"/>
    <testcase name="should have the expected baseUrl" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyManager #init()"/>
    <testcase name="should remove property &apos;endpointId&apos; from each rootDependency if available and append it to artifactId" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyManager #init()"/>
    <testcase name="should remove property &apos;endpointId&apos; from each dependencyExclude in rootDependencies and append it to artifactId" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyManager #init()"/>
    <testcase name="should remove property &apos;endpointId&apos; from each rootDependencyExclude if available and append it to artifactId" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyManager #init()"/>
    <testcase name="should create list of DepReference items from given list of dependencies" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyManager #_createDepReferenceListFromArtifactDependencies()"/>
    <testcase name="should set referrer to &quot;root&quot; if param referrer is set to null" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyManager #_createDepReferenceListFromArtifactDependencies()"/>
    <testcase name="should append all html import resources of given resource list into DOM using utils.DOM api including all referrers of each resource" time="0.112" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyManager #_injectDependenciesToDom()"/>
    <testcase name="should append all css resources of given resource list into DOM using utils.DOM api including all referrers of each resource" time="0.007" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyManager #_injectDependenciesToDom()"/>
    <testcase name="should append all javascript resources of given resource list into DOM using utils.DOM api including all referrers of each resource" time="0.003" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyManager #_injectDependenciesToDom()"/>
    <testcase name="should keep order of resources when injecting them into DOM" time="0.02" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyManager #_injectDependenciesToDom()"/>
    <testcase name="should return true for resource type &quot;htmlImport&quot;" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyManager #_isValidResourceType()"/>
    <testcase name="should return true for resource type &quot;stylesheet&quot;" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyManager #_isValidResourceType()"/>
    <testcase name="should return true for resource type &quot;javascript&quot;" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyManager #_isValidResourceType()"/>
    <testcase name="should return false if given string does not match any type name" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyManager #_isValidResourceType()"/>
    <testcase name="should return a list of all resources in correct order for given list of DepReference items" time="0.008" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_calculateResourceList()"/>
    <testcase name="should ignore endpointId appendix on artifacts that where converted by the manifestConverter" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_calculateResourceList()"/>
    <testcase name="should throw TypeError" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem()"/>
    <testcase name="should create a new resource containing file and type for item given as object" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem()"/>
    <testcase name="should create a new resource containing file and type for item given as string" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem()"/>
    <testcase name="should use &quot;prod&quot; file path if parameter &quot;runtimeMode&quot; has value &quot;prod&quot;" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem()"/>
    <testcase name="should use &quot;dev&quot; file path if parameter &quot;runtimeMode&quot; has value &quot;dev&quot;" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem()"/>
    <testcase name="should add the baseUrl as prefix for all files if some url is given" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem()"/>
    <testcase name="should not create a new resource for item given as string using an absolute url, since allowAbsoluteResourceUrls = false" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem() resources with absolute url allowAbsoluteResourceUrls is false"/>
    <testcase name="should create a new resource of type &quot;javascript&quot; for item given as string using an absolute url" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem() resources with absolute url allowAbsoluteResourceUrls is true"/>
    <testcase name="should create a new resource of type &quot;htmlImport&quot; for item given as string using an absolute url" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem() resources with absolute url allowAbsoluteResourceUrls is true"/>
    <testcase name="should create a new resource of type &quot;stylesheet&quot; for item given as string using an absolute url" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem() resources with absolute url allowAbsoluteResourceUrls is true"/>
    <testcase name="should not create a new resource and return undefined, if the type valu is unkown" time="0.004" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem() resources with absolute url allowAbsoluteResourceUrls is true not create resource"/>
    <testcase name="should not create a new resource and return undefined, if the type parameter missed" time="0.004" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem() resources with absolute url allowAbsoluteResourceUrls is true not create resource"/>
    <testcase name="should not create a new resource and return undefined, if no paramter exists" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem() resources with absolute url allowAbsoluteResourceUrls is true not create resource"/>
    <testcase name="should associate fileEnding &quot;.js&quot; with type &quot;javascript&quot;" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_determineResourceType()"/>
    <testcase name="should associate fileEnding &quot;.css&quot; with type &quot;stylesheet&quot;" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_determineResourceType()"/>
    <testcase name="should associate fileEnding &quot;.html&quot; and &quot;.htm&quot; with type &quot;htmlImport&quot;" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_determineResourceType()"/>
    <testcase name="should associate type parameter &quot;js&quot; with type &quot;javascript&quot;" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_determineResourceType()"/>
    <testcase name="should associate type parameter &quot;html&quot; with type &quot;htmlImport&quot;" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_determineResourceType()"/>
    <testcase name="should associate type parameter &quot;css&quot; with type &quot;stylesheet&quot;" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_determineResourceType()"/>
    <testcase name="should associate type parameter &quot;js&quot; with type &quot;javascript&quot;" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_determineResourceType()"/>
    <testcase name="should associate type parameter &quot;js&quot; with type &quot;javascript&quot;" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_determineResourceType()"/>
    <testcase name="should associate type parameter &quot;js&quot; with type &quot;javascript&quot;" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_determineResourceType()"/>
    <testcase name="should call axios.request method with given url" time="0.255" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_fetchManifest()"/>
    <testcase name="should return a promise" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_fetchManifest()"/>
    <testcase name="should return an array of DepReference items" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_getDependencyListFromTree"/>
    <testcase name="should order the items in the returned array so that all dependencies of an item have a lower index the item itself" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_getDependencyListFromTree"/>
    <testcase name="should return index of DepReference item in internal depList" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_getIndexOfDepReferenceItem()"/>
    <testcase name="should return -1, as given item is not in internal depList" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_getIndexOfDepReferenceItem()"/>
    <testcase name="should return a promise" time="0.006" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_getManifestForDepReference()"/>
    <testcase name="should resolve returned promise with manifest from responseCache if there is one" time="0.003" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_getManifestForDepReference()"/>
    <testcase name="should resolve returned promise with inline manifest from depReference if there is one and no manifest was found in responseCache" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_getManifestForDepReference()"/>
    <testcase name="should resolve returned promise with requested manifest from baseUrl if there is neither a manifest in responseCache nor in inline manifest" time="0.208" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_getManifestForDepReference()"/>
    <testcase name="should reject returned promise if there is an error while fetching manifest" time="0.205" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_getManifestForDepReference() Error handling"/>
    <testcase name="should reject returned promise if baseUrl is not given when fetching manifest needs to be called" time="0.064" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_getManifestForDepReference() Error handling"/>
    <testcase name="should throw a TypeError if first given parameter is not an instanceOf DepReference" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_getManifestForDepReference() Error handling"/>
    <testcase name="should return the converted manifest using manifestConverter.convert method" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_prepareResponseData()"/>
    <testcase name="should throw an error if called given data is not a valid manifest object/string" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DepMgrDependencyResolution #_prepareResponseData()"/>
    <testcase name="should return a promise" time="0.004" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_buildRawDependencyTree()"/>
    <testcase name="should resolve the returned promise with an instance of DependencyTree" time="0.823" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_buildRawDependencyTree()"/>
    <testcase name="should create a DependencyTree representing the raw dependency structure for given rootDependency list" time="0.827" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_buildRawDependencyTree()"/>
    <testcase name="should throw an TypeError if &apos;dependencies&apos; parameter is not an Array" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_buildRawDependencyTree() Error Handling"/>
    <testcase name="should reject returned promise if there is an TypeError resolving single dependencies" time="0.003" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_buildRawDependencyTree() Error Handling"/>
    <testcase name="should reject returned promise if there is an error resolving single depenencies" time="0.005" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_buildRawDependencyTree() Error Handling"/>
    <testcase name="should return given DependencyTree.Node" time="0.002" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkAndAddExcludesForRootDependencies"/>
    <testcase name="should add dependencyExcludes from corresponding rootDependency to given node" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkAndAddExcludesForRootDependencies"/>
    <testcase name="should throw an TypeError if given parameter is not of type DependencyTree.Node" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkAndAddExcludesForRootDependencies Error handling"/>
    <testcase name="should return the given DepReference instance" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkAndAddExcludesToDepReference()"/>
    <testcase name="should append all dependencyExcludes defined in given manifest for corresponding artifact to excludes of given DepReference" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkAndAddExcludesToDepReference()"/>
    <testcase name="should throw an TypeError if first given parameter is not an instance of DepReference" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkAndAddExcludesToDepReference() Error handling"/>
    <testcase name="should throw an TypeError if second given parameter is not an object" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkAndAddExcludesToDepReference() Error handling"/>
    <testcase name="should return promise which will be resolved with given DependencyTree" time="0.214" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkDepTreeForExcludes()"/>
    <testcase name="should call _checkAndAddExcludesToDepReference() for each Node in DependencyTree and assign dependencyExcludes if there are any" time="0.21" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkDepTreeForExcludes()"/>
    <testcase name="should call _checkAndAddExcludesForRootDependencies() for each rootNode in DependencyTree" time="0.219" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkDepTreeForExcludes()"/>
    <testcase name="should throw an TypeError if first parameter is not an instance of DependencyMgr.DependencyTree" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkDepTreeForExcludes() Error handling"/>
    <testcase name="should throw an TypeError if second parameter is not a string" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkDepTreeForExcludes() Error handling"/>
    <testcase name="should return a promise" time="0.003" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies()"/>
    <testcase name="should resolve the returned promise with an object containing an array of the dependencies of given depRef item and all the resources for the given depRefItem" time="0.229" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies()"/>
    <testcase name="should use inline manifest from given dependency if there is any" time="0.005" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies()"/>
    <testcase name="should use manifest from responseCache if there is already one for given webpackageId" time="0.002" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies()"/>
    <testcase name="should add inline or requested manifest to response cache if there is no entry for corresponding webpackageId" time="0.206" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies()"/>
    <testcase name="should request manifest files from given baseUrl" time="0.204" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies()"/>
    <testcase name="should append &apos;/&apos; to baseUrl if not present" time="0.216" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies()"/>
    <testcase name="should throw an TypeError if parameter baseUrl is not given or a not of type string" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies() Error handling"/>
    <testcase name="should throw an TypeError if parameter depReference is not an instance of DependencyMgr.DepReference" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies() Error handling"/>
    <testcase name="should reject returned promise if there is an error while fetching the manifest" time="0.103" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies() Error handling"/>
    <testcase name="should create an warning log for each conflicted artifact" time="0.005" classname="Chrome 56.0.2924 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_logDependencyConflicts()"/>
    <testcase name="should add property &quot;resources&quot; containing an empty array to each artifact out of type [elementaryComponents|compoundComponents|utilities]." time="0.003" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Single converter methods #_addResourcesArrayToArtifacts()"/>
    <testcase name="should remove &quot;endpoints&quot; property from all artifacts which have exactly one endpoint." time="0.004" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Single converter methods #_removeSingleEndpointsFromArtifacts()"/>
    <testcase name="should move &quot;dependencies&quot; and &quot;resources&quot; from the artifacts single endpoint to artifact itself." time="0.002" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Single converter methods #_removeSingleEndpointsFromArtifacts()"/>
    <testcase name="should append &quot;endpointId&quot; of removed endpoint to &quot;artifactId&quot; using # separator." time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Single converter methods #_removeSingleEndpointsFromArtifacts()"/>
    <testcase name="should convert dependency &quot;[webpackageId]/[artifactId]/[endpointId]&quot; to {webpackageId: &quot;[webpackageId]&quot;, artifactId: &quot;[artifactId]#[endpointId]&quot;}." time="0.006" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Single converter methods #_convertArtifactDependencyItems()"/>
    <testcase name="should convert dependency &quot;this/[artifactId]/[endpointId]&quot; to object {artifactId: &quot;[artifactId]#[endpointId]&quot;}." time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Single converter methods #_convertArtifactDependencyItems()"/>
    <testcase name="should remove all artifacts with multiple endpoints" time="0.003" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Single converter methods #_convertMultipleEndpointsToArtifacts()"/>
    <testcase name="should create new artifact with artifactId [artifactId]#[endpointId] for each endpoint holding coressponding resources and dependencies." time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Single converter methods #_convertMultipleEndpointsToArtifacts()"/>
    <testcase name="should add property &quot;artifactId&quot; and remove property &quot;componentId&quot; for all members in compound components." time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Single converter methods #_convertComponentIdToArtifactIdInMembers()"/>
    <testcase name="should assign corresponding [artifactId] value to property &quot;artifactId&quot; for each member" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Single converter methods #_convertComponentIdToArtifactIdInMembers()"/>
    <testcase name="should remove &quot;endpointId&quot; properties from each dependency if there is such a property" time="0.006" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Single converter methods #_removeEndpointsFromDependencyItems()"/>
    <testcase name="should append endpointId value to corresponding artifactId using separator &quot;#&quot;" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Single converter methods #_removeEndpointsFromDependencyItems()"/>
    <testcase name="should remove &apos;endpointId&apos; properties from each dependencyExclude if there is such a property" time="0.003" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Single converter methods #_removeEndpointsFromDependencyExcludeItems()"/>
    <testcase name="should append &apos;endpointId&apos; value to corresponding artifactId using separator &apos;#&apos;" time="0" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Single converter methods #_removeEndpointsFromDependencyExcludeItems()"/>
    <testcase name="should convert given manifest with model version 8.x.x to model version 9.1" time="0.006" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Complete manifest transformations #convert()"/>
    <testcase name="should apply conversion directly on given manifest if it&apos;s an object" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Complete manifest transformations #convert()"/>
    <testcase name="should return converted manifest as object if manifest is given as JSON string" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Complete manifest transformations #convert()"/>
    <testcase name="should return given artifact if no modification where necessary" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Public API #cleanArtifact()"/>
    <testcase name="should return a new object representing a the cleaned artifact. All &apos;#[endpointId]&apos; appendices should be removed" time="0.001" classname="Chrome 56.0.2924 (Windows 10 0.0.0).ManifestConverter Public API #cleanArtifact()"/>
    <system-out><![CDATA[Chrome 56.0.2924 (Windows 10 0.0.0) LOG: 'testing...'
,Chrome 56.0.2924 (Windows 10 0.0.0) LOG: 'done'
,Chrome 56.0.2924 (Windows 10 0.0.0) ERROR: 'parameter 'node' needs to be an instance of DependencyTree.Node'
,Chrome 56.0.2924 (Windows 10 0.0.0) ERROR: 'Parameter 'node' needs to be an instance of DependencyTree.Node'
,Chrome 56.0.2924 (Windows 10 0.0.0) ERROR: 'Given node is not member of DependencyTree'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'Trying to store an ambiguous component "id-xxx/test-artifact-id" in the componentCache. In the componentCache exists already another artifact with the same artifactId, but a different webpackageId: "id-yyy/test-artifact-id".'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'The following resource can not be loaded since the use of absolute urls is not allowed by default: blob:http://xxxxxx?type=js'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'The following resource will be ignored, because the type of the resource is unkown. It should be "js", "html" or "css". (blob:http://xxxxxx?type=xxx)'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'The following resource will be ignored, because the type of the resource is unkown. It should be "js", "html" or "css". (blob:http://xxxxxx?yyy=xxx)'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'The following resource will be ignored, because the type of the resource is unkown. It should be "js", "html" or "css". (blob:http://xxxxxx)'
,Chrome 56.0.2924 (Windows 10 0.0.0) ERROR: 'Could not resolve Dependency: ', TypeError{}
,Chrome 56.0.2924 (Windows 10 0.0.0) ERROR: 'Could not resolve Dependency: ', TypeError{}
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'Artifact', 'util5', 'is defined in multiple webpackages: [', 'package5@2.0.0, package5@1.0.0', ']'

]]></system-out>
    <system-err/>
  </testsuite>
  <testsuite name="Firefox 52.0.0 (Windows 10 0.0.0)" package="" timestamp="2017-03-22T15:20:01" id="0" hostname="Edwin" tests="225" errors="0" failures="0" time="4.428">
    <properties>
      <property name="browser.fullName" value="Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0"/>
    </properties>
    <testcase name="should add property &quot;resources&quot; containing an empty array to each artifact out of type [elementaryComponents|compoundComponents|utilities]." time="0.01" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Single converter methods #_addResourcesArrayToArtifacts()"/>
    <testcase name="should remove &quot;endpoints&quot; property from all artifacts which have exactly one endpoint." time="0.008" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Single converter methods #_removeSingleEndpointsFromArtifacts()"/>
    <testcase name="should move &quot;dependencies&quot; and &quot;resources&quot; from the artifacts single endpoint to artifact itself." time="0.009" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Single converter methods #_removeSingleEndpointsFromArtifacts()"/>
    <testcase name="should append &quot;endpointId&quot; of removed endpoint to &quot;artifactId&quot; using # separator." time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Single converter methods #_removeSingleEndpointsFromArtifacts()"/>
    <testcase name="should convert dependency &quot;[webpackageId]/[artifactId]/[endpointId]&quot; to {webpackageId: &quot;[webpackageId]&quot;, artifactId: &quot;[artifactId]#[endpointId]&quot;}." time="0.005" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Single converter methods #_convertArtifactDependencyItems()"/>
    <testcase name="should convert dependency &quot;this/[artifactId]/[endpointId]&quot; to object {artifactId: &quot;[artifactId]#[endpointId]&quot;}." time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Single converter methods #_convertArtifactDependencyItems()"/>
    <testcase name="should remove all artifacts with multiple endpoints" time="0.004" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Single converter methods #_convertMultipleEndpointsToArtifacts()"/>
    <testcase name="should create new artifact with artifactId [artifactId]#[endpointId] for each endpoint holding coressponding resources and dependencies." time="0.005" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Single converter methods #_convertMultipleEndpointsToArtifacts()"/>
    <testcase name="should add property &quot;artifactId&quot; and remove property &quot;componentId&quot; for all members in compound components." time="0.014" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Single converter methods #_convertComponentIdToArtifactIdInMembers()"/>
    <testcase name="should assign corresponding [artifactId] value to property &quot;artifactId&quot; for each member" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Single converter methods #_convertComponentIdToArtifactIdInMembers()"/>
    <testcase name="should remove &quot;endpointId&quot; properties from each dependency if there is such a property" time="0.006" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Single converter methods #_removeEndpointsFromDependencyItems()"/>
    <testcase name="should append endpointId value to corresponding artifactId using separator &quot;#&quot;" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Single converter methods #_removeEndpointsFromDependencyItems()"/>
    <testcase name="should remove &apos;endpointId&apos; properties from each dependencyExclude if there is such a property" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Single converter methods #_removeEndpointsFromDependencyExcludeItems()"/>
    <testcase name="should append &apos;endpointId&apos; value to corresponding artifactId using separator &apos;#&apos;" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Single converter methods #_removeEndpointsFromDependencyExcludeItems()"/>
    <testcase name="should convert given manifest with model version 8.x.x to model version 9.1" time="0.018" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Complete manifest transformations #convert()"/>
    <testcase name="should apply conversion directly on given manifest if it&apos;s an object" time="0.005" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Complete manifest transformations #convert()"/>
    <testcase name="should return converted manifest as object if manifest is given as JSON string" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Complete manifest transformations #convert()"/>
    <testcase name="should return given artifact if no modification where necessary" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Public API #cleanArtifact()"/>
    <testcase name="should return a new object representing a the cleaned artifact. All &apos;#[endpointId]&apos; appendices should be removed" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).ManifestConverter Public API #cleanArtifact()"/>
    <testcase name="should add item to cache using given key" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).ResponseCache #addItem(key, item)"/>
    <testcase name="should throw an error if key is not of type string or is empty string" time="0.006" classname="Firefox 52.0.0 (Windows 10 0.0.0).ResponseCache #addItem(key, item)"/>
    <testcase name="should throw an error if item is null" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).ResponseCache #addItem(key, item)"/>
    <testcase name="should override item if there is already one for given key" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).ResponseCache #addItem(key, item)"/>
    <testcase name="should return the item for given key" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).ResponseCache #get(key)"/>
    <testcase name="should return null if no item was found for given key" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).ResponseCache #get(key)"/>
    <testcase name="should throw an error if key is not of type string or is empty string" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).ResponseCache #get(key)"/>
    <testcase name="should remove item with given key from cache and return removed item" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).ResponseCache #removeItem(key)"/>
    <testcase name="should return null if no item was found for given key" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).ResponseCache #removeItem(key)"/>
    <testcase name="should throw an error if key is not of type string or is empty string" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).ResponseCache #removeItem(key)"/>
    <testcase name="should empty the cache" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).ResponseCache #invalidate()"/>
    <testcase name="should insert item at given index in given array if item is of type string" time="0.02" classname="Firefox 52.0.0 (Windows 10 0.0.0).Utils Array #insertItemAtIndex()"/>
    <testcase name="should insert item at given index in given array if item is of type boolean" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).Utils Array #insertItemAtIndex()"/>
    <testcase name="should insert item at given index in given array if item is of type number" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).Utils Array #insertItemAtIndex()"/>
    <testcase name="should insert item at given index in given array if item is of type object" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).Utils Array #insertItemAtIndex()"/>
    <testcase name="should insert insertItem before given item in given array" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).Utils Array #insertBefore()"/>
    <testcase name="should insert insertItem at the end of given array if given item is not in array" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).Utils Array #insertBefore()"/>
    <testcase name="should return index of inserted item" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).Utils Array #insertBefore()"/>
    <testcase name="should remove given item from array" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).Utils Array #removeItemFromArray()"/>
    <testcase name="should throw an error if given item is not in array" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).Utils Array #removeItemFromArray()"/>
    <testcase name="should stringify a given object and store it to localStorage using given key" time="0.005" classname="Firefox 52.0.0 (Windows 10 0.0.0).StorageManager #setObjectToLocalStorage()"/>
    <testcase name="should get a value from localStorage as Object by given key" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).StorageManager #getObjectFromLocalStorage()"/>
    <testcase name="should return null if no item is found in localStorage for the given key" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).StorageManager #getObjectFromLocalStorage()"/>
    <testcase name="should return a new model for given id if no model is available for the given id" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).StorageManager #getModel()"/>
    <testcase name="should return the inserted DependencyTree.Node instance" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #insertNode()"/>
    <testcase name="should append given node to rootNodes array if neither parent nor before parameter is given." time="0.006" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #insertNode()"/>
    <testcase name="should insert given node to parents children array if parent and before parameter are given." time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #insertNode()"/>
    <testcase name="should insert given node to rootNodes array as left neighbour of given before node if no parent is given." time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #insertNode()"/>
    <testcase name="should remove given node and all of it&apos;s descendants from tree" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #removeNode()"/>
    <testcase name="should return null if node to be removed could not be found in tree" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #removeNode()"/>
    <testcase name="should return the removed node" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #removeNode()"/>
    <testcase name="should remove given node from usesExisting array of all nodes inside given nodes usedBy array" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #removeNode()"/>
    <testcase name="should log an error if given parameter is not a DependencyTree.Node instance" time="0.006" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #removeNode()"/>
    <testcase name="should traverse the tree in depth first pre-order and call the given callback with each visited node" time="0.008" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #traverseDF()"/>
    <testcase name="should break traversal if callback returns false" time="0.016" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #traverseDF()"/>
    <testcase name="should log an error if parameter is not of type function" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #traverseDF()"/>
    <testcase name="should traverse the tree in breadth first order and call the given callback with each visited node" time="0.008" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #traverseBF()"/>
    <testcase name="should break traversal if callback returns false" time="0.005" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #traverseBF()"/>
    <testcase name="should log an error if parameter is not of type function" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #traverseBF()"/>
    <testcase name="should traverse subtree starting from given node in breadth first order and call callback for each visited node" time="0.005" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #traverseSubtreeBF()"/>
    <testcase name="should log an error if first parameter is not of type DependencyTree.Node" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #traverseSubtreeBF()"/>
    <testcase name="should log an error if second paramter is not of type function" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #traverseSubtreeBF()"/>
    <testcase name="should return true if given node is member of the DependencyTree" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #contains()"/>
    <testcase name="should return false if given node is not member of the DependencyTree" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree #contains()"/>
    <testcase name="should return true if given node references same artifact (based on artifactId and webpackageId)" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree_Node #equalsArtifcat()"/>
    <testcase name="should return false if given node references a different artifact" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree_Node #equalsArtifcat()"/>
    <testcase name="should return a string containing the path from root down to node using [webpackageId]/[artifactId] as node names" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree_Node #getPathAsString()"/>
    <testcase name="should return true if node is a descendant of given node checking also paths for nodes in usedBy array" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree_Node #isDescendantOf()"/>
    <testcase name="should return true if node is an ancestor of given node checking also paths defined by usesExisting array" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree_Node #isAncestorOf()"/>
    <testcase name="should set excluded value of duplicated node to false if duplicate node has excluded value of false" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #_removeDuplicate()"/>
    <testcase name="should keep excluded value true of duplicated node if duplicate node has excluded value of true as well" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #_removeDuplicate()"/>
    <testcase name="should keep excluded value false of duplicated node if duplicate node has excluded value of false as well" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #_removeDuplicate()"/>
    <testcase name="should keep excluded value false of duplicated node if duplicate node has excluded value of true" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #_removeDuplicate()"/>
    <testcase name="should only mark nodes as excluded if they are excluded in subtree of duplicated node as well as in subtree of duplicate node" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #_removeDuplicate()"/>
    <testcase name="should append referrer of removed duplicate node to referrer of duplicated nodes" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #_removeDuplicate()"/>
    <testcase name="should mark all excluded Nodes" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #applyExcludes()"/>
    <testcase name="should return the DependencyTree itself" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #applyGlobalExclude()"/>
    <testcase name="should set exclude value to true for all appearances of given artifact" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #applyGlobalExclude()"/>
    <testcase name="should log an error when given parameter is not a node from within the current DependencyTree instance" time="0.012" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #getListOfConflictedNodes()"/>
    <testcase name="should return an array containing a list of all conflicts found in DependencyTree (using level order traversal)" time="0.005" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #getListOfConflictedNodes()"/>
    <testcase name="should return an array containing a list of all conflicts found in subtree of given node (using level order traversal)" time="0.004" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #getListOfConflictedNodes()"/>
    <testcase name="should return an empty array if there are no conflicts in subtree of given nodes" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #getListOfConflictedNodes()"/>
    <testcase name="should return the DependencyTree itself" time="0.004" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #removeDuplicates()"/>
    <testcase name="should remove all duplicated nodes from DependencyTree. Only the first one that is found using breadth-first traversal is kept." time="0.014" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #removeDuplicates()"/>
    <testcase name="should return DependencyTree which contains each webpackage exactly once" time="0.018" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #removeDuplicates()"/>
    <testcase name="should create correct &apos;usedBy&apos; and &apos;usesExisting&apos; relations" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #removeDuplicates()"/>
    <testcase name="should set excluded value on each remaining node correctly" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #removeDuplicates()"/>
    <testcase name="should remove all nodes which have property excludes set to true" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #removeExcludes()"/>
    <testcase name="should return the DependencyTree itself" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyTree Modification #removeExcludes()"/>
    <testcase name="should be equals with an expected document" time="0.02" classname="Firefox 52.0.0 (Windows 10 0.0.0).ComponentResolver #resolvedComponent build resolvedComponent"/>
    <testcase name="should create new ManifestCache instance with empty caches for each type of manifest" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #new Cache()"/>
    <testcase name="should be contains in the _componentCache as object" time="0.004" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #addComponentCacheEntry"/>
    <testcase name="should get the under test-key stored artifact" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #getComponentCacheEntry"/>
    <testcase name="should get the under test-key2 stored artifact" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #getComponentCacheEntry"/>
    <testcase name="returned object is deep equal with _componentCache attribute" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #getAllComponents"/>
    <testcase name="should set the processedManifest for the key" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #setResolvedComponent()"/>
    <testcase name="should get the processedManifest for the key" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #getResolvedComponent()"/>
    <testcase name="should get null, if by the key no cache entry exists" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #getResolvedComponent()"/>
    <testcase name="should delete by key cached object" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #deleteResolvedComponent()"/>
    <testcase name="should set a entry in _componentCache with the given key" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #_setComponentCacheEntryForKey"/>
    <testcase name="add compoundComponent to empty cache" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #_addComponentCacheEntry add  componentEntry to empty cache"/>
    <testcase name="add elementaryComponent to empty cache" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #_addComponentCacheEntry add  componentEntry to empty cache"/>
    <testcase name="for compoundComponent should exist the cache entry by artifactId" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #_addComponentCacheEntry add componentEntry, if an the component with the same artifactId already in cache"/>
    <testcase name="for elementaryComponent should exist the cache entry by artifactId" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #_addComponentCacheEntry add componentEntry, if an the component with the same artifactId already in cache"/>
    <testcase name="it should be exists with warning " time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #_addComponentCacheEntry add componentEntry, if the articleId exist for another webpackage"/>
    <testcase name="should find the component with artifactId &quot;my-elementary&quot;" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #_findComponentInDocument in document with all artefacts"/>
    <testcase name="should find the component with artifactId &quot;my-compound&quot;" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #_findComponentInDocument in document with all artefacts"/>
    <testcase name="should not find the artifact with artifactId &quot;my-util1&quot;" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #_findComponentInDocument in document with all artefacts"/>
    <testcase name="should not find the artifact with artifactId &quot;my-app&quot;" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #_findComponentInDocument in document with all artefacts"/>
    <testcase name="should not find the component with artifactId" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).Cache #_findComponentInDocument without compoundComponent and elementaryComponent artifacts,"/>
    <testcase name="should append crc root DOM node to given DOM node" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).CRC #init() with crc root element: cubx-core-crc"/>
    <testcase name="should append crc root DOM node to given DOM node" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).CRC #init() whitout crc root element"/>
    <testcase name="" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).CRC #getCRCElement() body is crc root"/>
    <testcase name="should get the current crc root element as Element Object" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).CRC #getCRCElement() crc root marked with &quot;cubx-core-crc&quot; "/>
    <testcase name="should return the DependencyMgr instance of crc" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).CRC #getDependencyMgr()"/>
    <testcase name="model version 5.12.5 cut after minor version " time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).CRC #getNormedModelVersion"/>
    <testcase name="model version 5.12 will left by to 5.12 " time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).CRC #getNormedModelVersion"/>
    <testcase name="model version 5 will be completed to 5.0 " time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).CRC #getNormedModelVersion"/>
    <testcase name="model version 8.0.0 is allowed " time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).CRC #_isModelVersionSupported"/>
    <testcase name="model version 8.0 is allowed " time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).CRC #_isModelVersionSupported"/>
    <testcase name="model version 3.0  is not allowed " time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).CRC #_isModelVersionSupported"/>
    <testcase name="model version 4.1.0 is not allowed " time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).CRC #_isModelVersionSupported"/>
    <testcase name="should be equals with resolvedComponent" time="0.007" classname="Firefox 52.0.0 (Windows 10 0.0.0).CRCComponentResolution #getResolvedComponent build resolvedComponent, if initial not in cache resolvedComponent should be build, if not in "/>
    <testcase name="the method &quot;_resolveComponent&quot; should be called" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).CRCComponentResolution #getResolvedComponent build resolvedComponent, if initial not in cache resolvedComponent should be build, if not in "/>
    <testcase name="resolvedComponent should be stored in cache " time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).CRCComponentResolution #getResolvedComponent build resolvedComponent, if initial not in cache resolvedComponent should be build, if not in "/>
    <testcase name="should be equals with an expected document " time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).CRCComponentResolution #getResolvedComponent build resolvedComponent, if initial not in cache resolvedComponent should be get from cache"/>
    <testcase name="the method &quot;_resolveComponent&quot; should be not called" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).CRCComponentResolution #getResolvedComponent build resolvedComponent, if initial not in cache resolvedComponent should be get from cache"/>
    <testcase name="the cache &quot;_resolvedComponents&quot; should have not contains the resolvedComponent after invalidate" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).CRCComponentResolution #invalidateResolvedManifest"/>
    <testcase name="should set the dependency list as object if list is given as object" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyManager #init()"/>
    <testcase name="should have the expected baseUrl" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyManager #init()"/>
    <testcase name="should remove property &apos;endpointId&apos; from each rootDependency if available and append it to artifactId" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyManager #init()"/>
    <testcase name="should remove property &apos;endpointId&apos; from each dependencyExclude in rootDependencies and append it to artifactId" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyManager #init()"/>
    <testcase name="should remove property &apos;endpointId&apos; from each rootDependencyExclude if available and append it to artifactId" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyManager #init()"/>
    <testcase name="should create list of DepReference items from given list of dependencies" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyManager #_createDepReferenceListFromArtifactDependencies()"/>
    <testcase name="should set referrer to &quot;root&quot; if param referrer is set to null" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyManager #_createDepReferenceListFromArtifactDependencies()"/>
    <testcase name="should append all html import resources of given resource list into DOM using utils.DOM api including all referrers of each resource" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyManager #_injectDependenciesToDom()"/>
    <testcase name="should append all css resources of given resource list into DOM using utils.DOM api including all referrers of each resource" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyManager #_injectDependenciesToDom()"/>
    <testcase name="should append all javascript resources of given resource list into DOM using utils.DOM api including all referrers of each resource" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyManager #_injectDependenciesToDom()"/>
    <testcase name="should keep order of resources when injecting them into DOM" time="0.007" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyManager #_injectDependenciesToDom()"/>
    <testcase name="should return true for resource type &quot;htmlImport&quot;" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyManager #_isValidResourceType()"/>
    <testcase name="should return true for resource type &quot;stylesheet&quot;" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyManager #_isValidResourceType()"/>
    <testcase name="should return true for resource type &quot;javascript&quot;" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyManager #_isValidResourceType()"/>
    <testcase name="should return false if given string does not match any type name" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyManager #_isValidResourceType()"/>
    <testcase name="should return a list of all resources in correct order for given list of DepReference items" time="0.012" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_calculateResourceList()"/>
    <testcase name="should ignore endpointId appendix on artifacts that where converted by the manifestConverter" time="0.005" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_calculateResourceList()"/>
    <testcase name="should throw TypeError" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem()"/>
    <testcase name="should create a new resource containing file and type for item given as object" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem()"/>
    <testcase name="should create a new resource containing file and type for item given as string" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem()"/>
    <testcase name="should use &quot;prod&quot; file path if parameter &quot;runtimeMode&quot; has value &quot;prod&quot;" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem()"/>
    <testcase name="should use &quot;dev&quot; file path if parameter &quot;runtimeMode&quot; has value &quot;dev&quot;" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem()"/>
    <testcase name="should add the baseUrl as prefix for all files if some url is given" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem()"/>
    <testcase name="should not create a new resource for item given as string using an absolute url, since allowAbsoluteResourceUrls = false" time="0.004" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem() resources with absolute url allowAbsoluteResourceUrls is false"/>
    <testcase name="should create a new resource of type &quot;javascript&quot; for item given as string using an absolute url" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem() resources with absolute url allowAbsoluteResourceUrls is true"/>
    <testcase name="should create a new resource of type &quot;htmlImport&quot; for item given as string using an absolute url" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem() resources with absolute url allowAbsoluteResourceUrls is true"/>
    <testcase name="should create a new resource of type &quot;stylesheet&quot; for item given as string using an absolute url" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem() resources with absolute url allowAbsoluteResourceUrls is true"/>
    <testcase name="should not create a new resource and return undefined, if the type valu is unkown" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem() resources with absolute url allowAbsoluteResourceUrls is true not create resource"/>
    <testcase name="should not create a new resource and return undefined, if the type parameter missed" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem() resources with absolute url allowAbsoluteResourceUrls is true not create resource"/>
    <testcase name="should not create a new resource and return undefined, if no paramter exists" time="0.004" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_createResourceFromItem() resources with absolute url allowAbsoluteResourceUrls is true not create resource"/>
    <testcase name="should associate fileEnding &quot;.js&quot; with type &quot;javascript&quot;" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_determineResourceType()"/>
    <testcase name="should associate fileEnding &quot;.css&quot; with type &quot;stylesheet&quot;" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_determineResourceType()"/>
    <testcase name="should associate fileEnding &quot;.html&quot; and &quot;.htm&quot; with type &quot;htmlImport&quot;" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_determineResourceType()"/>
    <testcase name="should associate type parameter &quot;js&quot; with type &quot;javascript&quot;" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_determineResourceType()"/>
    <testcase name="should associate type parameter &quot;html&quot; with type &quot;htmlImport&quot;" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_determineResourceType()"/>
    <testcase name="should associate type parameter &quot;css&quot; with type &quot;stylesheet&quot;" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_determineResourceType()"/>
    <testcase name="should associate type parameter &quot;js&quot; with type &quot;javascript&quot;" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_determineResourceType()"/>
    <testcase name="should associate type parameter &quot;js&quot; with type &quot;javascript&quot;" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_determineResourceType()"/>
    <testcase name="should associate type parameter &quot;js&quot; with type &quot;javascript&quot;" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_determineResourceType()"/>
    <testcase name="should call axios.request method with given url" time="0.251" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_fetchManifest()"/>
    <testcase name="should return a promise" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_fetchManifest()"/>
    <testcase name="should return an array of DepReference items" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_getDependencyListFromTree"/>
    <testcase name="should order the items in the returned array so that all dependencies of an item have a lower index the item itself" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_getDependencyListFromTree"/>
    <testcase name="should return index of DepReference item in internal depList" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_getIndexOfDepReferenceItem()"/>
    <testcase name="should return -1, as given item is not in internal depList" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_getIndexOfDepReferenceItem()"/>
    <testcase name="should return a promise" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_getManifestForDepReference()"/>
    <testcase name="should resolve returned promise with manifest from responseCache if there is one" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_getManifestForDepReference()"/>
    <testcase name="should resolve returned promise with inline manifest from depReference if there is one and no manifest was found in responseCache" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_getManifestForDepReference()"/>
    <testcase name="should resolve returned promise with requested manifest from baseUrl if there is neither a manifest in responseCache nor in inline manifest" time="0.204" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_getManifestForDepReference()"/>
    <testcase name="should reject returned promise if there is an error while fetching manifest" time="0.203" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_getManifestForDepReference() Error handling"/>
    <testcase name="should reject returned promise if baseUrl is not given when fetching manifest needs to be called" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_getManifestForDepReference() Error handling"/>
    <testcase name="should throw a TypeError if first given parameter is not an instanceOf DepReference" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_getManifestForDepReference() Error handling"/>
    <testcase name="should return the converted manifest using manifestConverter.convert method" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_prepareResponseData()"/>
    <testcase name="should throw an error if called given data is not a valid manifest object/string" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DepMgrDependencyResolution #_prepareResponseData()"/>
    <testcase name="should create a new PayloadObject object" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).EventFactory #createModelChangePayloadObject() create with slot, detail, connectionHook"/>
    <testcase name="should create a new PayloadObject object" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).EventFactory #createModelChangePayloadObject() create with slot, detail"/>
    <testcase name="should be throw an exception just one argument assign" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).EventFactory #createModelChangePayloadObject() error handlingl"/>
    <testcase name="should be throw an exception no argument assign" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).EventFactory #createModelChangePayloadObject() error handlingl"/>
    <testcase name="connectionHook not a function: should cause an exception" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).EventFactory #createModelChangePayloadObject() error handlingl"/>
    <testcase name="should be true, if an event from type EventFactory.types.CIF_READY created" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).EventFactory #createEvent create an event from type EventFactory_types_CIF_READY"/>
    <testcase name="should be true, if an event from type EventFactory.types.CIF_READYDOM_UPDATE_READY created" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).EventFactory #createEvent create an event from type EventFactory_types_CIF_DOM_UPDATE_READY"/>
    <testcase name="should be true, if an event from type EventFactory.types.COMPONENT_READY created" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).EventFactory #createEvent create an event from type EventFactory_types_COMPONENT_READY"/>
    <testcase name="should be true, if an event from type EventFactory.types.CIF_ALL_COMPONENTS_READY created" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).EventFactory #createEvent create an event from type EventFactory_types_CIF_ALL_COMPONENTS_READY"/>
    <testcase name="should be true, if an event from type EventFactory.types.CIF_MODEL_CHANGE created" time="0.005" classname="Firefox 52.0.0 (Windows 10 0.0.0).EventFactory #createEvent create an event from type EventFactory_types_CIF_MODEL_CHANGE"/>
    <testcase name="should be true, if an event from type EventFactory.types.CIF_MODEL_CHANGE created whitout detail" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).EventFactory #createEvent create an event from type EventFactory_types_CIF_MODEL_CHANGE"/>
    <testcase name="should be false, if an event from type EventFactory.types.CIF_INIT_START created" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).EventFactory #createEvent create an event from type EventFactory_types_CIF_INIT_START"/>
    <testcase name="should be false, if an event from type EventFactory.types.CIF_START created" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).EventFactory #createEvent create an event from type EventFactory_types_CIF_START"/>
    <testcase name="should be false, if an event from type EventFactory.types.CIF_INIT_READY created" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).EventFactory #createEvent create an event from type EventFactory_types_CIF_INIT_READY"/>
    <testcase name="should be throw a TypeException" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).EventFactory #createEvent type parameter is unknown"/>
    <testcase name="should return a promise" time="0.004" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_buildRawDependencyTree()"/>
    <testcase name="should resolve the returned promise with an instance of DependencyTree" time="0.825" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_buildRawDependencyTree()"/>
    <testcase name="should create a DependencyTree representing the raw dependency structure for given rootDependency list" time="0.823" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_buildRawDependencyTree()"/>
    <testcase name="should throw an TypeError if &apos;dependencies&apos; parameter is not an Array" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_buildRawDependencyTree() Error Handling"/>
    <testcase name="should reject returned promise if there is an TypeError resolving single dependencies" time="0.015" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_buildRawDependencyTree() Error Handling"/>
    <testcase name="should reject returned promise if there is an error resolving single depenencies" time="0.011" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_buildRawDependencyTree() Error Handling"/>
    <testcase name="should return given DependencyTree.Node" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkAndAddExcludesForRootDependencies"/>
    <testcase name="should add dependencyExcludes from corresponding rootDependency to given node" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkAndAddExcludesForRootDependencies"/>
    <testcase name="should throw an TypeError if given parameter is not of type DependencyTree.Node" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkAndAddExcludesForRootDependencies Error handling"/>
    <testcase name="should return the given DepReference instance" time="0.002" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkAndAddExcludesToDepReference()"/>
    <testcase name="should append all dependencyExcludes defined in given manifest for corresponding artifact to excludes of given DepReference" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkAndAddExcludesToDepReference()"/>
    <testcase name="should throw an TypeError if first given parameter is not an instance of DepReference" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkAndAddExcludesToDepReference() Error handling"/>
    <testcase name="should throw an TypeError if second given parameter is not an object" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkAndAddExcludesToDepReference() Error handling"/>
    <testcase name="should return promise which will be resolved with given DependencyTree" time="0.209" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkDepTreeForExcludes()"/>
    <testcase name="should call _checkAndAddExcludesToDepReference() for each Node in DependencyTree and assign dependencyExcludes if there are any" time="0.212" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkDepTreeForExcludes()"/>
    <testcase name="should call _checkAndAddExcludesForRootDependencies() for each rootNode in DependencyTree" time="0.211" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkDepTreeForExcludes()"/>
    <testcase name="should throw an TypeError if first parameter is not an instance of DependencyMgr.DependencyTree" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkDepTreeForExcludes() Error handling"/>
    <testcase name="should throw an TypeError if second parameter is not a string" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_checkDepTreeForExcludes() Error handling"/>
    <testcase name="should return a promise" time="0.003" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies()"/>
    <testcase name="should resolve the returned promise with an object containing an array of the dependencies of given depRef item and all the resources for the given depRefItem" time="0.208" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies()"/>
    <testcase name="should use inline manifest from given dependency if there is any" time="0.006" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies()"/>
    <testcase name="should use manifest from responseCache if there is already one for given webpackageId" time="0.004" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies()"/>
    <testcase name="should add inline or requested manifest to response cache if there is no entry for corresponding webpackageId" time="0.207" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies()"/>
    <testcase name="should request manifest files from given baseUrl" time="0.241" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies()"/>
    <testcase name="should append &apos;/&apos; to baseUrl if not present" time="0.204" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies()"/>
    <testcase name="should throw an TypeError if parameter baseUrl is not given or a not of type string" time="0.001" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies() Error handling"/>
    <testcase name="should throw an TypeError if parameter depReference is not an instance of DependencyMgr.DepReference" time="0" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies() Error handling"/>
    <testcase name="should reject returned promise if there is an error while fetching the manifest" time="0.102" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_resolveDepReferenceDependencies() Error handling"/>
    <testcase name="should create an warning log for each conflicted artifact" time="0.005" classname="Firefox 52.0.0 (Windows 10 0.0.0).DependencyMgr DependencyTree creation #_logDependencyConflicts()"/>
    <system-out><![CDATA[Chrome 56.0.2924 (Windows 10 0.0.0) LOG: 'testing...'
,Chrome 56.0.2924 (Windows 10 0.0.0) LOG: 'done'
,Chrome 56.0.2924 (Windows 10 0.0.0) ERROR: 'parameter 'node' needs to be an instance of DependencyTree.Node'
,Chrome 56.0.2924 (Windows 10 0.0.0) ERROR: 'Parameter 'node' needs to be an instance of DependencyTree.Node'
,Chrome 56.0.2924 (Windows 10 0.0.0) ERROR: 'Given node is not member of DependencyTree'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'Trying to store an ambiguous component "id-xxx/test-artifact-id" in the componentCache. In the componentCache exists already another artifact with the same artifactId, but a different webpackageId: "id-yyy/test-artifact-id".'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'The following resource can not be loaded since the use of absolute urls is not allowed by default: blob:http://xxxxxx?type=js'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'The following resource will be ignored, because the type of the resource is unkown. It should be "js", "html" or "css". (blob:http://xxxxxx?type=xxx)'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'The following resource will be ignored, because the type of the resource is unkown. It should be "js", "html" or "css". (blob:http://xxxxxx?yyy=xxx)'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'The following resource will be ignored, because the type of the resource is unkown. It should be "js", "html" or "css". (blob:http://xxxxxx)'
,Chrome 56.0.2924 (Windows 10 0.0.0) ERROR: 'Could not resolve Dependency: ', TypeError{}
,Chrome 56.0.2924 (Windows 10 0.0.0) ERROR: 'Could not resolve Dependency: ', TypeError{}
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Chrome 56.0.2924 (Windows 10 0.0.0) WARN: 'Artifact', 'util5', 'is defined in multiple webpackages: [', 'package5@2.0.0, package5@1.0.0', ']'
,Firefox 52.0.0 (Windows 10 0.0.0) LOG: 'testing...'
,Firefox 52.0.0 (Windows 10 0.0.0) LOG: 'done'
,Firefox 52.0.0 (Windows 10 0.0.0) ERROR: 'parameter 'node' needs to be an instance of DependencyTree.Node'
,Firefox 52.0.0 (Windows 10 0.0.0) ERROR: 'Parameter 'node' needs to be an instance of DependencyTree.Node'
,Firefox 52.0.0 (Windows 10 0.0.0) ERROR: 'Given node is not member of DependencyTree'
,Firefox 52.0.0 (Windows 10 0.0.0) WARN: 'Trying to store an ambiguous component "id-xxx/test-artifact-id" in the componentCache. In the componentCache exists already another artifact with the same artifactId, but a different webpackageId: "id-yyy/test-artifact-id".'
,Firefox 52.0.0 (Windows 10 0.0.0) WARN: 'The following resource can not be loaded since the use of absolute urls is not allowed by default: blob:http://xxxxxx?type=js'
,Firefox 52.0.0 (Windows 10 0.0.0) WARN: 'The following resource will be ignored, because the type of the resource is unkown. It should be "js", "html" or "css". (blob:http://xxxxxx?type=xxx)'
,Firefox 52.0.0 (Windows 10 0.0.0) WARN: 'The following resource will be ignored, because the type of the resource is unkown. It should be "js", "html" or "css". (blob:http://xxxxxx?yyy=xxx)'
,Firefox 52.0.0 (Windows 10 0.0.0) WARN: 'The following resource will be ignored, because the type of the resource is unkown. It should be "js", "html" or "css". (blob:http://xxxxxx)'
,Firefox 52.0.0 (Windows 10 0.0.0) ERROR: 'Could not resolve Dependency: ', TypeError{}
,Firefox 52.0.0 (Windows 10 0.0.0) ERROR: 'Could not resolve Dependency: ', TypeError{}
,Firefox 52.0.0 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Firefox 52.0.0 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Firefox 52.0.0 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Firefox 52.0.0 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Firefox 52.0.0 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Firefox 52.0.0 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Firefox 52.0.0 (Windows 10 0.0.0) WARN: 'Webpackage with id undefined.undefined has modelVersion undefined. This CRC (version=2.3.0-SNAPSHOT) supports the following modelVersion(s): 8.0,8.1,8.2,8.3,9.0,9.1'
,Firefox 52.0.0 (Windows 10 0.0.0) WARN: 'Artifact', 'util5', 'is defined in multiple webpackages: [', 'package5@2.0.0, package5@1.0.0', ']'

]]></system-out>
    <system-err/>
  </testsuite>
</testsuites>
